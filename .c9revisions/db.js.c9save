{"ts":1376793633805,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1376793613467,"patch":[[{"diffs":[[1,"/*global Q:true */\n\n(function(n$) {\n\n    n$.register('db', n$.makeNameSpace());\n\n    /*\n     * Instance a DB Manager class which abstracts the mechanics for connecting to and selecting from an IndexedDb database\n     */\n    var dbManager = function(name, version) {\n        var ret = n$.object();\n        ret.add('promises', n$.object());\n\n        var isNewConnectionRequired = false;\n        var schemaScripts = [];\n\n        /*\n         * Initiate a promise to connect to a database. When that connection is established, the promise will be resolved.\n         */\n        var connect = function(dbName, dbVersion, dbOnUpgrade) {\n            isNewConnectionRequired = (!ret.promises.connect || dbName !== name || dbVersion !== version);\n            if (isNewConnectionRequired) {\n                var deferred = Q.defer();\n\n                ret.promises.connect = deferred.promise;\n\n                version = dbVersion || 1;\n                name = dbName;\n                dbOnUpgrade = dbOnUpgrade || function() {};\n\n                var request = window.indexedDB.open(name, version);\n\n                request.onblocked = function(event) {\n                    ret.IDB.close();\n                    alert(\"A new version of this page is ready. Please reload!\");\n                };\n\n                request.onerror = function(event) {\n                    deferred.reject(new Error(\"Database error: \" + event.target.errorCode));\n                    if (ret.IDB) {\n                        ret.IDB.close();\n                    }\n                };\n                request.onsuccess = function(event) {\n                    ret.IDB = ret.IDB || request.result;\n                    deferred.resolve(ret.IDB);\n                };\n                request.onupgradeneeded = function(event) {\n                    ret.IDB = ret.IDB || request.result;\n                    if (schemaScripts.length > 0) {\n                        n$.iterate(schemaScripts, function(script) {\n                            //debugger;\n                            script(ret.IDB);\n                        });\n                    }\n                    dbOnUpgrade(ret.IDB);\n                };\n            }\n            return ret.promises.connect;\n        };\n\n        /*\n         * Disconnect from a database\n         */\n        var disconnect = function() {\n            if (ret.promises.connect.isFulfilled()) {\n                ret.IDB.close();\n            }\n            else if (ret.IDB) {\n                ret.promises.connect.done(ret.IDB.close);\n            }\n        };\n\n        //Collect the methods into an API:\n        ret.add('connect', connect);\n        ret.add('disconnect', disconnect);\n        ret.add('getDb', function() {\n            return ret.IDB;\n        });\n\n        ret.add('schemaScripts', schemaScripts);\n        ret.add('tables', n$.object());\n\n        ret.add('ddl', {\n            createTable: function(tableName, tablePkColumnName, autoIncrement) {\n                return n$.fun.shiftRight(n$.db.table.create, ret, arguments, this);\n            },\n            dropTable: function(tableName) {\n                return n$.fun.shiftRight(n$.db.index.drop, ret, arguments, this);\n            },\n            createIndex: function(tableName, columnName, indexName, isUnique) {\n                return n$.fun.shiftRight(n$.db.index.create, ret, arguments, this);\n            }\n        });\n\n        ret.add('insert', function() {\n            return n$.fun.shiftRight(n$.db.insert, ret, arguments, this);\n        });\n\n        var select = n$.object();\n        ret.add('select', select);\n\n        select.add('all', function() {\n            return n$.fun.shiftRight(n$.db.select.all, ret, arguments, this);\n        });\n\n        select.add('from', function() {\n            return n$.fun.shiftRight(n$.db.select.from, ret, arguments, this);\n        });\n\n        //Connect to the DB automatically\n        ret.connect(name, version);\n\n        return ret;\n    };\n\n    n$.db.register('dbManager', dbManager);\n\n}(window.$nameSpace$));"]],"start1":0,"start2":0,"length1":0,"length2":3995}]],"length":3995,"saved":false}
