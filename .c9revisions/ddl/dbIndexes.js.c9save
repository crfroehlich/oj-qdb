{"ts":1376793695891,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1376793676786,"patch":[[{"diffs":[[1,"/*global Q:true,Faker:true,$nameSpace$: true */\n\n(function(n$) {\n\n      n$.db.register('index', n$.makeNameSpace());\n\n    /*\n      * Private implementation method to create a new index.\n      * TODO: This (and other) DDL ops assumes that version management is handled elsewhere. Probably need to come up with a scipt-to-version mapper.\n      * @param dbManager {n$.db.Manager} A DB Manager instance\n      * @param tableName {String} The name of the table (aka Object Store) on which to add the index\n      * @param columnName {String} The name of the column, property or path to property to index (e.g. 'customerid' or 'store.orders.customerid').\n      * @param indexName {String} [indexName=columnName + 'Idx'] The name of the index\n      * @param isUnique {Boolean} [isUnique=false] True if a unique constraint should be applied on the property\n     */\n    var createIndexImpl = function (dbManager, tableName, columnName, indexName, isUnique) {\n        var table = dbManager.tables[tableName];\n        return table.createIndex(columnName, indexName || columnName + 'Idx', {\n            unique: true === isUnique\n        });\n    };\n\n    /*\n     * Public implementation method to create a new index.\n     * TODO: This (and other) DDL ops assumes that version management is handled elsewhere. Probably need to come up with a scipt-to-version mapper.\n     * @param dbManager {n$.db.Manager} A DB Manager instance\n     * @param tableName {String} The name of the table (aka Object Store) on which to add the index\n     * @param columnName {String} The name of the column, property or path to property to index (e.g. 'customerid' or 'store.orders.customerid').\n     * @param indexName {String} [indexName=columnName + 'Idx'] The name of the index\n     * @param isUnique {Boolean} [isUnique=false] True if a unique constraint should be applied on the property\n    */\n    var createIndex = function (dbManager, tableName, columnName, indexName, isUnique) {\n        var deferred = Q.defer();\n\n        dbManager.schemaScripts.push(function () {\n            try {\n                var index = createIndexImpl(dbManager, tableName, columnName, indexName, isUnique);\n                deferred.resolve(index);\n\n            }\n            catch (e) {\n                console.log(e, e.stack);\n                deferred.reject(new Error('Could not create a new index', e));\n            }\n            return dbManager.tables[tableName];\n        });\n        return deferred.promise;\n    };\n\n    n$.db.index.register('create', createIndex);\n\n}(window.$nameSpace$));"]],"start1":0,"start2":0,"length1":0,"length2":2544}]],"length":2544,"saved":false}
