{"ts":1376793649465,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1376793638621,"patch":[[{"diffs":[[1,"/*global Q:true,Faker:true,$nameSpace$: true */\n\n(function () {\n    'use strict';\n    \n    n$.db.register('select', n$.makeNameSpace());\n\n    /*\n    * Private implementation method to select all records from a table\n    * @param dbManager {n$.db.Manager} A DB Manager instance\n    * @param tableName {String} The name of the table to select from\n   */\n    var selectAllImpl = function (dbManager, tableName, ret) {\n        var deferred = Q.defer();\n        var doSelect = function () {\n            var transaction = dbManager.getDb().transaction([tableName]);\n\n            var objectStore = transaction.objectStore(tableName);\n\n            ret = ret || [];\n            objectStore.openCursor().onsuccess = function(event) {\n                var cursor = event.target.result;\n                if (cursor) {\n                    ret.push(cursor.value);\n                    cursor.continue();\n                } else {\n                    deferred.resolve(ret);\n                }\n            };\n\n            return deferred.promise;\n        };\n        try {\n            dbManager.promises.connect.then(doSelect);\n        }\n        catch (e) {\n            console.log(e, e.stack);\n            deferred.reject(new Error('Could not select records', e));\n        }\n\n        return deferred.promise;\n    };\n\n    /*\n     * Public implementation method to select all records from a table\n    * @param dbManager {n$.db.Manager} A DB Manager instance\n    * @param tableName {String} The name of the table to select from\n    */\n    var selectAll = function (dbWrapper, tableName) {\n        var ret = [];\n        var promise = selectAllImpl(dbWrapper, tableName, ret);\n        promise.return = ret;\n        return promise;\n    };\n\n    n$.db.select.register('all', selectAll);\n   \n\n    /*\n    * Private implementation method to select all records from a table\n    * @param dbManager {n$.db.Manager} A DB Manager instance\n    * @param tableName {String} The name of the table to select from\n    * @param indexName {String} The name of the index to select from\n    * @param indexVal {String} The \"where\" clause: where indexName = indexVal\n   */\n    var selectFromImpl = function (dbManager, tableName, indexName, indexVal, ret) {\n        var deferred = Q.defer();\n        var doSelect = function () {\n            var transaction = dbManager.getDb().transaction([tableName]);\n\n            var objectStore = transaction.objectStore(tableName);\n            var index = objectStore.index(indexName);\n\n            ret = ret || [];\n            var keyRange;\n            if (indexVal) {\n                keyRange = IDBKeyRange.only(indexVal);\n            }\n\n            index.openCursor(keyRange).onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (cursor) {\n                    ret.push(cursor.value);\n                    cursor.continue();\n                } else {\n                    deferred.resolve(ret);\n                }\n            };\n\n            return deferred.promise;\n        };\n        \n        try {\n            dbManager.promises.connect.then(doSelect);\n        }\n        catch (e) {\n            console.log(e, e.stack);\n            deferred.reject(new Error('Could not select records', e));\n        }\n\n        return deferred.promise;\n    };\n\n    /*\n     * Public implementation method to select all records from a table\n    * @param dbManager {n$.db.Manager} A DB Manager instance\n    * @param tableName {String} The name of the table to select from\n    * @param indexName {String} The name of the index to select from\n    * @param indexVal {String} The \"where\" clause: where indexName = indexVal\n    */\n    var selectFrom = function (dbWrapper, tableName, indexName, indexVal) {\n        var ret = [];\n        var promise = selectFromImpl(dbWrapper, tableName, indexName, indexVal, ret);\n        promise.return = ret;\n        return promise;\n    };\n\n    n$.db.select.register('from', selectFrom);\n\n\n} ());"]],"start1":0,"start2":0,"length1":0,"length2":3943}]],"length":3943,"saved":false}
