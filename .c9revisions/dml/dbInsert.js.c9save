{"ts":1376793777592,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1376793757880,"patch":[[{"diffs":[[1,"/*global Q:true,Faker:true,$nameSpace$: true */\n\n(function(n$) {\n\n    /*\n    * Private implementation method to insert new records into a table\n    * @param dbManager {n$.db.Manager} A DB Manager instance\n    * @param tableName {String} The name of the table to insert into\n    * @param records {Array} An Array of records (objects) to insert into the db\n   */\n    var insertImpl = function (dbManager, tableName, records) {\n        var deferred = Q.defer();\n        var doInsert = function () {\n            var transaction = dbManager.getDb().transaction([tableName], 'readwrite');\n\n            var objectStore = transaction.objectStore(tableName);\n            n$.iterate(records, function (rec) {\n                objectStore.add(rec);\n            });\n\n            return deferred.resolve(true);\n        };\n        try {\n            dbManager.promises.connect.then(doInsert);\n        }\n        catch (e) {\n            console.log(e, e.stack);\n            deferred.reject(new Error('Could not insert records', e));\n        }\n\n        return deferred.promise;\n    };\n\n    /*\n     * Private implementation method to insert new records into a table\n     * @param dbManager {n$.db.Manager} A DB Manager instance\n     * @param tableName {String} The name of the table to insert into\n     * @param records {Array} An Array of records (objects) to insert into the db\n    */\n    var insert = function (dbWrapper, tableName, records) {\n        return insertImpl(dbWrapper, tableName, records);\n    };\n\n    n$.db.register('insert', insert);\n\n}(window.$nameSpace$));"]],"start1":0,"start2":0,"length1":0,"length2":1555}]],"length":1555,"saved":false}
